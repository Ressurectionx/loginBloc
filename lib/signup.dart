import 'package:firebase_auth/firebase_auth.dart';import 'package:flutter/material.dart';import 'package:loginbloc/colors/fonts.dart';import 'package:loginbloc/login.dart';import 'colors/colors.dart';class Signup extends StatefulWidget {  const Signup({Key? key}) : super(key: key);  @override  State<Signup> createState() => _SignupState();}class _SignupState extends State<Signup> {  final FirebaseAuth _auth=FirebaseAuth.instance;  final GlobalKey<FormState> _formKey=GlobalKey<FormState>();  final TextEditingController _name= TextEditingController();  final TextEditingController _email=TextEditingController();  final TextEditingController _pass=TextEditingController();  String nameError= '';  String emailError='';  String passError=''; // AuthResultStatus?  errorMsg;  String errorMsg='';  bool success=false;  String _userEmail="";     void _register() async{     UserCredential result;     try{       if(_name.text != ""){         result=await _auth.createUserWithEmailAndPassword(email: _email.text, password: _pass.text);         if(result.user!=null){           Navigator.push(context, MaterialPageRoute(builder: (context)=>const Login()));         }       }     } on FirebaseException catch (e){  /*     print(e.code);      errorMsg="Something went wrong";*/       print(e.code);       switch(e.code){         case "email-already-in-use":           setState(() {             errorMsg=  "Email  Already In Use";           });           break;         case "invalid-email":                    setState(() {                      errorMsg=  "*Email is Invalid";                    });                    break;         case "weak-password":           setState(() {             errorMsg=  "Weak Password"; });           break;         case "null":           setState(() {             errorMsg=  "";           });           break;         case "unknown":           setState(() {             errorMsg=  "";           });           break;       }     }   }  @override  Widget build(BuildContext context) {    double height = MediaQuery.of(context).size.height;    double width = MediaQuery.of(context).size.width;    return Scaffold(      body: SingleChildScrollView(          child: Form(              key: _formKey,              child: Column(            mainAxisAlignment: MainAxisAlignment.center,            crossAxisAlignment: CrossAxisAlignment.center,            children: [              SizedBox(height: 150,width: width,),              Hero(                tag: "planet",                child: Container(                    height: 95,width: 95,                    clipBehavior: Clip.antiAliasWithSaveLayer,                    decoration: BoxDecoration(                        shape: BoxShape.circle,                        color: white.withOpacity(0.5),                        border: Border.all(color: orange,width: 1),                        boxShadow:[                          BoxShadow(                            color:white.withOpacity(0.7),                            offset:const Offset(-1.0,-1.0),                            blurRadius:13,                            spreadRadius:5,                          )                        ]                    ),                    child: Column(                      mainAxisAlignment: MainAxisAlignment.center,                      crossAxisAlignment: CrossAxisAlignment.center,                      children: [                        Image.asset("assets/images/planetDeer2.png",height: 65,width: 65,),                        //  Text("Planet Deer",style: textYellow22,),                      ],)),              ),              const SizedBox(height: 25,),              Container(                height:46,                width:width*0.72,                decoration:BoxDecoration(                    borderRadius:BorderRadius.circular(25),                    color:white,                    border:Border.all(color:grey,width:1.5)),                child: Center(                  child:Padding(                    padding:const EdgeInsets.all(8.0),                    child:TextFormField(                      controller: _name,                      validator: (value){                        if(value == null || value.isEmpty){                          setState(() {                            nameError= "*Name is required";                          });                        }else{setState(() {                          nameError='';                        });}                      },                      textAlign: TextAlign.center,                      style:TextStyle(color:black),                      decoration:InputDecoration(                          labelStyle:TextStyle(color:black,fontSize: 18,fontWeight: FontWeight.w500,letterSpacing: 1.4),                          hintText:"Fullname",                          hintStyle:TextStyle(color:grey2,fontSize: 14,                              fontWeight: FontWeight.w400,letterSpacing: 1.4),                          isCollapsed:true,                          border:InputBorder.none                      ),                    ),                  ),                ),              ),              const SizedBox(height: 2,),              Text(nameError,style: const TextStyle(color: Colors.redAccent,fontSize: 13),),              const SizedBox(height: 12,),              Container(                height:46,                width:width*0.72,                decoration:BoxDecoration(                    borderRadius:BorderRadius.circular(25),                    color:white,                    border:Border.all(color:grey,width:1.5)),                child: Center(                  child:Padding(                    padding:const EdgeInsets.all(8.0),                    child:TextFormField(                      controller: _email,                      validator: (value){                        if(value == null || value.isEmpty){                          setState(() {                            emailError= "*Email is required";                          });                        }else{setState(() {                          emailError='';                        });}                      },                      textAlign: TextAlign.center,                      style:TextStyle(color:black),                      decoration:InputDecoration(                          hintText:"Email",                          labelStyle:TextStyle(color:black,fontSize: 18,fontWeight: FontWeight.w500,letterSpacing: 1.4),                          hintStyle:TextStyle(color:grey2,fontSize: 14,),                          isCollapsed:true,                          border:InputBorder.none                      ),                    ),                  ),                ),              ),              const SizedBox(height: 2,),              Text(emailError,style: const TextStyle(color: Colors.redAccent,fontSize: 13),),              const SizedBox(height: 12,),              Container(                height:46,                width:width*0.72,                decoration:BoxDecoration(                    borderRadius:BorderRadius.circular(25),                    color:white,                    border:Border.all(color:grey,width:1.5)),                child: Center(                  child:Padding(                    padding:const EdgeInsets.all(8.0),                    child:TextFormField(                      controller: _pass,                      validator: (value){                        if(value == null || value.isEmpty){                          setState(() {                            passError= "*Name is required";                          });                        }else{setState(() {                          passError='';                        });}                      },                      textAlign: TextAlign.center,                      style:TextStyle(color:black),                      decoration:InputDecoration(                          hintText:"Password",                          labelStyle:TextStyle(color:black,fontSize: 18,fontWeight: FontWeight.w500,letterSpacing: 1.4),                          hintStyle:TextStyle(color:grey2,fontSize: 14,),                          isCollapsed:true,                          border:InputBorder.none                      ),                    ),                  ),                ),              ),              const SizedBox(height: 2,),              Text(passError,style: const TextStyle(color: Colors.redAccent,fontSize: 13),),              const SizedBox(height: 30,),              GestureDetector(                  onTap: (){                       if(_formKey.currentState!.validate() ){                         _register();                       }                  },                  child:Container(                    height:45,                    width:150,                    decoration:BoxDecoration(                        borderRadius:BorderRadius.circular(25),                        color:darkPink.withOpacity(0.7),                        border:Border.all(color:grey,width:1.5)),                    child:Center(child:Text("Signup",style: TextStyle(color: white,fontSize: 16,fontWeight: FontWeight.bold),)),                  )) ,              const SizedBox(height: 35,),              Text(errorMsg.toString(),style: const TextStyle(color: Colors.redAccent,fontSize: 15),),              const SizedBox(height: 100,),            ],))),    );  }}